from web3 import Web3, HTTPProvider, WebsocketProvider
from web3.middleware import geth_poa_middleware
from eth_abi import decode_abi

def setHash(id, hash):
    gas_price = 2500000000
    gas_limit = 3000000
    contract_address = "0x9C72030509Ba910c264969537386d7C8563fdA2d"
    args = []
    args.append(int(str(id), 0x10))
    args.append(str(hash))
    print(args)
    connection = Web3(HTTPProvider('http://13.124.13.173:8502'))
    connection.middleware_onion.inject(geth_poa_middleware, layer=0, name='POA Middleware')

    address = connection.toChecksumAddress(connection.eth.accounts[1])
    private = '0x6586566a6c37c4f5b47319f79ddae3a8387d4df7860dd18ff9b28743ce154337'
    abi = '''
    [
	{
		"constant": true,
		"inputs": [
			{
				"name": "id",
				"type": "uint256"
			},
			{
				"name": "hash",
				"type": "string"
			}
		],
		"name": "compareHash",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "id",
				"type": "uint256"
			},
			{
				"name": "hash",
				"type": "string"
			}
		],
		"name": "setHash",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "id",
				"type": "uint256"
			}
		],
		"name": "getHash",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	}
]'''

    bytecode = '''608060405234801561001057600080fd5b506105b8806100206000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630118245a1461005c5780632fbaba26146100e75780636b2fafa914610172575b600080fd5b34801561006857600080fd5b506100cd60048036038101908080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061021f565b604051808215151515815260200191505060405180910390f35b3480156100f357600080fd5b5061015860048036038101908080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506103f8565b604051808215151515815260200191505060405180910390f35b34801561017e57600080fd5b5061019d6004803603810190808035906020019092919050505061042b565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156101e35780820151818401526020810190506101c8565b50505050905090810190601f1680156102105780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6000816040516020018082805190602001908083835b60208310151561025a5780518252602082019150602081019050602083039250610235565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156102c3578051825260208201915060208101905060208303925061029e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660008085815260200190815260200160002060405160200180828054600181600116156101000203166002900480156103645780601f10610342576101008083540402835291820191610364565b820191906000526020600020905b815481529060010190602001808311610350575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831015156103ad5780518252602082019150602081019050602083039250610388565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614156103ed57600190506103f2565b600090505b92915050565b60008160008085815260200190815260200160002090805190602001906104209291906104e7565b506001905092915050565b6000606082600080858152602001908152602001600020808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104d75780601f106104ac576101008083540402835291602001916104d7565b820191906000526020600020905b8154815290600101906020018083116104ba57829003601f168201915b5050505050905091509150915091565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061052857805160ff1916838001178555610556565b82800160010185558215610556579182015b8281111561055557825182559160200191906001019061053a565b5b5090506105639190610567565b5090565b61058991905b8082111561058557600081600090555060010161056d565b5090565b905600a165627a7a723058206cd552fc56cbdbcc3bdf643853e954c0e7b2d765ad3dd2b63f4a04564c5e970f0029'''

    contract = connection.eth.contract(abi=abi, bytecode=bytecode)
    raw_tx = {
	'nonce': connection.eth.getTransactionCount(address),
	'gasPrice': connection.toHex(gas_price),
	'gas': connection.toHex(gas_limit),
	'from': address,
	'to': contract_address
    }

    raw_tx['data'] = contract.encodeABI(fn_name="setHash", args=args)
    signed_tx = connection.eth.account.signTransaction(raw_tx, private)

    tx_hash = connection.toHex(connection.eth.sendRawTransaction(signed_tx.rawTransaction))
    if(len(tx_hash) > 1):
	return True
    else:
	return False

def getHash(id):
    gas_price = 2500000000
    gas_limit = 3000000
    contract_address = "0x9C72030509Ba910c264969537386d7C8563fdA2d"
    args = []
    args.append(int(str(id), 0x10))
    print(args)
    connection = Web3(HTTPProvider('http://13.124.13.173:8502'))
    connection.middleware_onion.inject(geth_poa_middleware, layer=0, name='POA Middleware')

    address = connection.toChecksumAddress(connection.eth.accounts[1])
    private = '0x6586566a6c37c4f5b47319f79ddae3a8387d4df7860dd18ff9b28743ce154337'
    abi = '''
    [
	{
		"constant": true,
		"inputs": [
			{
				"name": "id",
				"type": "uint256"
			},
			{
				"name": "hash",
				"type": "string"
			}
		],
		"name": "compareHash",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "id",
				"type": "uint256"
			},
			{
				"name": "hash",
				"type": "string"
			}
		],
		"name": "setHash",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "id",
				"type": "uint256"
			}
		],
		"name": "getHash",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	}
]'''

    bytecode = '''608060405234801561001057600080fd5b506105b8806100206000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630118245a1461005c5780632fbaba26146100e75780636b2fafa914610172575b600080fd5b34801561006857600080fd5b506100cd60048036038101908080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061021f565b604051808215151515815260200191505060405180910390f35b3480156100f357600080fd5b5061015860048036038101908080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506103f8565b604051808215151515815260200191505060405180910390f35b34801561017e57600080fd5b5061019d6004803603810190808035906020019092919050505061042b565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156101e35780820151818401526020810190506101c8565b50505050905090810190601f1680156102105780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6000816040516020018082805190602001908083835b60208310151561025a5780518252602082019150602081019050602083039250610235565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156102c3578051825260208201915060208101905060208303925061029e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660008085815260200190815260200160002060405160200180828054600181600116156101000203166002900480156103645780601f10610342576101008083540402835291820191610364565b820191906000526020600020905b815481529060010190602001808311610350575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831015156103ad5780518252602082019150602081019050602083039250610388565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614156103ed57600190506103f2565b600090505b92915050565b60008160008085815260200190815260200160002090805190602001906104209291906104e7565b506001905092915050565b6000606082600080858152602001908152602001600020808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104d75780601f106104ac576101008083540402835291602001916104d7565b820191906000526020600020905b8154815290600101906020018083116104ba57829003601f168201915b5050505050905091509150915091565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061052857805160ff1916838001178555610556565b82800160010185558215610556579182015b8281111561055557825182559160200191906001019061053a565b5b5090506105639190610567565b5090565b61058991905b8082111561058557600081600090555060010161056d565b5090565b905600a165627a7a723058206cd552fc56cbdbcc3bdf643853e954c0e7b2d765ad3dd2b63f4a04564c5e970f0029'''

    contract = connection.eth.contract(abi=abi, bytecode=bytecode)
    raw_tx = {
	'nonce': connection.eth.getTransactionCount(address),
	'from': address,
	'to': contract_address
    }

    raw_tx['data'] = contract.encodeABI(fn_name="getHash", args=args)
    receipt = connection.eth.call(raw_tx)

    types = ['uint256', 'string']
    result = list(decode_abi(types, receipt))
    return result

def compareHash(id, hash):
    gas_price = 2500000000
    gas_limit = 3000000
    contract_address = "0x9C72030509Ba910c264969537386d7C8563fdA2d"
    args = []
    args.append(int(str(id), 0x10))
    args.append(hash)
    print(args)
    connection = Web3(HTTPProvider('http://13.124.13.173:8502'))
    connection.middleware_onion.inject(geth_poa_middleware, layer=0, name='POA Middleware')

    address = connection.toChecksumAddress(connection.eth.accounts[1])
    private = '0x6586566a6c37c4f5b47319f79ddae3a8387d4df7860dd18ff9b28743ce154337'
    abi = '''
    [
	{
		"constant": true,
		"inputs": [
			{
				"name": "id",
				"type": "uint256"
			},
			{
				"name": "hash",
				"type": "string"
			}
		],
		"name": "compareHash",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "id",
				"type": "uint256"
			},
			{
				"name": "hash",
				"type": "string"
			}
		],
		"name": "setHash",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "id",
				"type": "uint256"
			}
		],
		"name": "getHash",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	}
]'''

    bytecode = '''608060405234801561001057600080fd5b506105b8806100206000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630118245a1461005c5780632fbaba26146100e75780636b2fafa914610172575b600080fd5b34801561006857600080fd5b506100cd60048036038101908080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061021f565b604051808215151515815260200191505060405180910390f35b3480156100f357600080fd5b5061015860048036038101908080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506103f8565b604051808215151515815260200191505060405180910390f35b34801561017e57600080fd5b5061019d6004803603810190808035906020019092919050505061042b565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156101e35780820151818401526020810190506101c8565b50505050905090810190601f1680156102105780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6000816040516020018082805190602001908083835b60208310151561025a5780518252602082019150602081019050602083039250610235565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156102c3578051825260208201915060208101905060208303925061029e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660008085815260200190815260200160002060405160200180828054600181600116156101000203166002900480156103645780601f10610342576101008083540402835291820191610364565b820191906000526020600020905b815481529060010190602001808311610350575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831015156103ad5780518252602082019150602081019050602083039250610388565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614156103ed57600190506103f2565b600090505b92915050565b60008160008085815260200190815260200160002090805190602001906104209291906104e7565b506001905092915050565b6000606082600080858152602001908152602001600020808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104d75780601f106104ac576101008083540402835291602001916104d7565b820191906000526020600020905b8154815290600101906020018083116104ba57829003601f168201915b5050505050905091509150915091565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061052857805160ff1916838001178555610556565b82800160010185558215610556579182015b8281111561055557825182559160200191906001019061053a565b5b5090506105639190610567565b5090565b61058991905b8082111561058557600081600090555060010161056d565b5090565b905600a165627a7a723058206cd552fc56cbdbcc3bdf643853e954c0e7b2d765ad3dd2b63f4a04564c5e970f0029'''

    contract = connection.eth.contract(abi=abi, bytecode=bytecode)
    raw_tx = {
	'nonce': connection.eth.getTransactionCount(address),
	'from': address,
	'to': contract_address
    }

    raw_tx['data'] = contract.encodeABI(fn_name="compareHash", args=args)
    receipt = connection.eth.call(raw_tx)

    types = ['bool']
    result = list(decode_abi(types, receipt))
    return result

#setHash(1, "test")
#getHash(1)
#compareHash(1,"aaaaa")
